@model InteliRoute.Models.ViewModels.DashboardVm
@{
    ViewData["Title"] = "Dashboard";
    var labels = Model.MonthlySeries.Keys.ToArray();
    var values = Model.MonthlySeries.Values.ToArray();

    // uses the same VM prop, just clearer local names
    var deptLabels = Model.IntentDistribution.Keys.ToArray();
    var deptValues = Model.IntentDistribution.Values.ToArray();
}

<style>
    .chart-card .card-body {
        display: flex;
        flex-direction: column;
    }

    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: .25rem;
    }

    .chart-fit {
        position: relative;
        height: 320px;
    }
</style>

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="mb-0">
        Dashboard
        @if (Model.IsSuperAdmin)
        {
            <small class="text-muted">(All Tenants)</small>
        }
        else
        {
            <small class="text-muted">(Tenant @Model.TenantId)</small>
        }
    </h4>
</div>

<div class="row g-3">
    <div class="col-md-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="text-muted">Emails (30d)</div>
                <div class="fs-3 fw-semibold">@Model.Total</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="text-muted">Routed</div>
                <div class="fs-3 fw-semibold">@Model.Routed</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="text-muted">Triage</div>
                <div class="fs-3 fw-semibold">@Model.Triage</div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card h-100">
            <div class="card-body">
                <div class="text-muted">Failed</div>
                <div class="fs-3 fw-semibold text-danger">@Model.Failed</div>
            </div>
        </div>
    </div>
</div>

<div class="row g-3 mt-1">
    <div class="col-lg-7">
        <div class="card chart-card h-100">
            <div class="card-body">
                <div class="chart-header"><h6 class="mb-0">Monthly Emails</h6></div>
                <div class="chart-fit"><canvas id="monthlyChart"></canvas></div>
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        <div class="card chart-card h-100">
            <div class="card-body">
                <div class="chart-header"><h6 class="mb-0">Departments (30 days)</h6></div>
                <div class="chart-fit"><canvas id="deptChart"></canvas></div>
            </div>
        </div>
    </div>
</div>

@if (!Model.IsSuperAdmin)
{
    <div class="card mt-3">
        <div class="card-body">
            <h6 class="mb-2">Recent Emails</h6>
            <div class="table-responsive">
                <table class="table table-sm align-middle">
                    <thead>
                        <tr>
                            <th style="width:18%">Received (UTC)</th>
                            <th style="width:24%">From</th>
                            <th>Subject</th>
                            <th style="width:12%">Department</th>
                            <th style="width:12%">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var e in Model.Recent)
                        {
                            <tr>
                                <td>@e.ReceivedUtc.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@e.From</td>
                                <td class="text-truncate" style="max-width:420px">@e.Subject</td>
                                <td>@(e.PredictedDepartment ?? e.PredictedIntent?.ToString() ?? "—")</td>
                                <td>@e.RouteStatus</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <!-- Optional hint for super admins -->
    <div class="alert alert-info mt-3">
        Recent email content is hidden for Super Admins. Switch to a tenant context to view per-tenant recent emails.
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script>
        // Monthly (bar)
        const monthLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(labels));
        const monthValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(values));
        new Chart(document.getElementById('monthlyChart'), {
            type: 'bar',
            data: { labels: monthLabels, datasets: [{ label: 'Emails', data: monthValues }] },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: { legend: { display: false }, tooltip: { intersect: false } },
                scales: { x: { grid: { display: false } }, y: { beginAtZero: true, ticks: { precision: 0 } } },
                layout: { padding: { top: 4, right: 8, bottom: 4, left: 8 } }
            }
        });

        // Departments (doughnut)
        const deptLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(deptLabels));
        const deptValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(deptValues));
        const safeDeptLabels = (Array.isArray(deptLabels) && deptLabels.length) ? deptLabels : ['No data'];
        const safeDeptValues = (Array.isArray(deptValues) && deptValues.length) ? deptValues : [1];

        new Chart(document.getElementById('deptChart'), {
            type: 'doughnut',
            data: { labels: safeDeptLabels, datasets: [{ data: safeDeptValues }] },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '58%',
                plugins: {
                    legend: { position: 'bottom', align: 'start', labels: { boxWidth: 14, boxHeight: 14, padding: 10 } },
                    tooltip: {
                        callbacks: {
                            label: (ctx) => {
                                const label = ctx.label || '';
                                const val = Number(ctx.parsed || 0);
                                const total = ctx.dataset.data.reduce((a, b) => a + Number(b || 0), 0) || 1;
                                const pct = ((val / total) * 100).toFixed(1);
                                return `${label}: ${val} (${pct}%)`;
                            }
                        }
                    }
                },
                layout: { padding: { top: 0, right: 8, bottom: 0, left: 8 } }
            }
        });
    </script>
}
